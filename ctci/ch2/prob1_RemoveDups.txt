- Problem: 
	2.1 Remove Dups: Write code to remove duplicates from an unsorted linked list.

- Example: 
	1 -> 2 -> 3 -> 3
	1 -> 2 -> 3 -> 1
	3 -> 3
	1
	1 -> 2 -> 2 -> 2
- My approach:
	- Assume the data type of the linked list is integer.
	- Create a hashset of type Integer
	- Define a temp node "curr" to traverse the list
	- When travrsing, add the curr value in set, and check if the set contains curr.next value (check if null or not too)
		- if the set contains, then we need to remove the dup from the list
			- set curr.next to be curr.next.next
	- Time complexity: O(N)
	- Space complexity: O(N)

- Possible clarification questions:
	- What is the type of value in the linked list?

- My solution:

public class Node {
	int val;
	Node next;
	Node (int val) {
		this.val = val;
		next = null;
	}
}

public void removeDups(Node head) {
	if (head == null || head.next == null) {
		return;
	}

	Node curr = head;
	HashSet<Integer> set = new HashSet<>();
	while (curr.next != null) {
		set.add(curr.val);
		if (set.contains(curr.next)) {
			curr.next = curr.next.next;
		} else {
			curr = curr.next;
		}
		
		if (curr == null) {
			break;
		}
	}
}


- Problem follow up:
	How would you solve this problem if a temporary buffer is not allowed?

- My approach for the follow up questions: 
	- Sort the linked list, and then have nodes like curr to check if the next element is same or not

- Solution:
	- Solution 1 : with buffer. Make use of previous node.
	void deleteDups(LinkedListNode n) {
		HashSet<Integer> set = new HashSet<Integer>();
	 	LinkedListNode previous = null;
	 	while (n != null) {
	 		if (set.contains(n.data)) {
	 			previous.next = n.next;
	 		} else {
	 			set.add(n.data);
	 			previous = n;
	 		}
	 		n = n.next;
	 	}
	 }

	 - Time complexity: O(N)
	 - Space complexity: O(N)

	 - Solution 2 : without buffer. use two pointers and check for every single node with all the following nodes
	void deleteDups(LinkedListNode head) {
		LinkedListNode current = head;
		while (current != null) {
			/* Remove all future nodes that have the same value */
			LinkedListNode runner = current;
			while (runner.next != null) {
				if (runner.next.data == current.data) {
					runner.next = runner.next.next;
				} else {
					runner = runner.next;
 				}
 			}
 			current current.next;
 		}
 	}

 	- Time complexity: O(N^2)
	- Space complexity: O(1)

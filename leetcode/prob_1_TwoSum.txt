---Problem Description---

Given an array of integers, return indices of the two numbers such that they add up to a specific target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

Example:
Given nums = [2, 7, 11, 15], target = 9, 17

Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].

---My approach---
1. Define a hashmap that stores the difference from target with each item in the array as key, and the index of array as value

{(15: 0),(10: 1), (6: 1), ...}

2. if the map contains the current item in the array, then the output is the current index and the value from the map



---My answer---
class Solution {
    public int[] twoSum(int[] nums, int target) {
        HashMap<Integer, Integer> map = new HashMap<>();
        int[] output = new int[2];
        if (nums.length < 2) {
        	return output;
        }
        map.put(target - nums[0], 0);
        for (int i = 1; i < nums.length; i++) {
        	if (map.containsKey(nums[i])) {
        		output[0] = map.get(nums[i]);
        		output[1] = i;
        		break;
        	}
        	map.put(target - nums[i], i)
        }
        return output;
    }
}

---Solution---
** Approach #3 (One-pass Hash Table)
public int[] twoSum(int[] nums, int target) {
    Map<Integer, Integer> map = new HashMap<>();
    for (int i = 0; i < nums.length; i++) {
        int complement = target - nums[i];
        if (map.containsKey(complement)) {
            return new int[] { map.get(complement), i };
        }
        map.put(nums[i], i);
    }
    throw new IllegalArgumentException("No two sum solution");
}
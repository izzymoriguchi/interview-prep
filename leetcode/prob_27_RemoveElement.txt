- Problem: 
	Given an array and a value, remove all instances of that value in-place and return the new length.

	Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.

	The order of elements can be changed. It doesn't matter what you leave beyond the new length.

	Example:

	Given nums = [3,2,2,3], val = 3,

	Your function should return length = 2, with the first two elements of nums being 2.

- My through process/approach: 
	val = 3
	nums = [3,2,3,2,3,2]
	        ^ *
	        
	       [2,3,3,2,3,2]
	          ^   *
	          
	       [2,2,2,3,3,3]
	              ^     *
	           
	val = 3
	nums = [3]
	--> output : 0


	val = 3
	nums = [3, 2]
	        ^  *
	        [2, 3]
	            ^  *

	val = 3
	nums = [2,2,2,2,3]
	                ^ *
	                
	val = 3
	nums = [2,2,2,2,2]
	                ^ *
	                
	val = 5
	nums = [3,3]
	          ^ *
	Approach:
	  - Have 2 pointers p1 and p2
	  - p1 points to the first item of the array that is same as val
	  - we iterate through the array, moving the p2 everytime when the curr item is not a val
	  - when p2 sees a item that is same as val, then we swap the item at p1 and p2 and increment 
	    p1 by 1
    - Time complexity: O(n)
    - Space complexity: O(1) 

- My solution:
	class Solution {
	    public int removeElement(int[] nums, int val) {
	        if (nums == null || nums.length == 0) {
	            return 0;
	        }
	        
	        int n = nums.length;
	        if (n == 1) {
	            if (nums[0] == val) {
	                return 0;
	            }
	            return 1;
	        }
	        
	        int p1 = 0;
	        int p2 = 1;
	        while (p1 < n && p2 < n) {
	            if (nums[p1] != val) {
	                p1++;
	                p2++;
	            } else if (nums[p2] == val) {
	                p2++;
	            } else if (nums[p2] != val) {
	                int temp = nums[p1];
	                nums[p1] = nums[p2];
	                nums[p2] = temp;
	                p1++;
	                p2++;
	            }
	        }
	        if (nums[p1] != val) {
	            return n;
	        }
	        return p1;
	    }
	}

- Solutions & What I learned:
	public int removeElement(int[] nums, int val) {
	    int i = 0;
	    for (int j = 0; j < nums.length; j++) {
	        if (nums[j] != val) {
	            nums[i] = nums[j];
	            i++;
	        }
	    }
	    return i;
	}

	- Can implement 2 pointers using for loop. i represents slow runner(p1 in my case) and j represents fast runner
	(p2 in my case).
	- if nums[j] == val, we just increment j
	- if nums[j] != val, copy item at j into array at i, and we increment i and j
	- Time complexity: O(n)
    - Space complexity: O(1) 


- Problem:
	189. Rotate Array

	Rotate an array of n elements to the right by k steps.

	For example, with n = 7 and k = 3, the array [1,2,3,4,5,6,7] is rotated to [5,6,7,1,2,3,4].

	Note:
	Try to come up as many solutions as you can, there are at least 3 different ways to solve this problem.

- My thought process/approach:
	n = 7
	k = 3
	[1,2,3,4,5,6,7]
	->
	[5,6,7,1,2,3,4]

	if k = 4
	[4,5,6,7,1,2,3]

	if k = 5
	[3,4,5,6,7,1,2]

	if k = 6
	[2,3,4,5,6,7,1]

	if k = 7
	[1,2,3,4,5,6,7]

	if k = 8
	[7,1,2,3,4,5,6]


	number of rotation: k % 7

	brute solution:
		- have a new array, copy the k % 7 elems from the back of the array, and then n - k % 7 elems after
		- copy the elems to the original array
	Time complexity: O(n)
	Space complexity: O(n)
	I can't come up with the approach with not using extra space. I'll implement this approach with extra space

- My attempt/answer:
    public void rotate(int[] nums, int k) {
        int[] output = new int[nums];
        int n = nums.length;
        int rotateNum = k % n;
        int j = 0;
        for (int i = n - rotateNum; i < n; i++) {
            output[j] = nums[i];
            j++;
        }
        
        for (int i = 0; i < n - rotateNum; i++) {
            output[j] = nums[i];
            j++;
        }
        
        for (int i = 0; i < n; i++) {
            nums[i] = output[i];
        }
    }

- Solutions:
** Solution by danny6514 using reverse ** 

	public void rotate(int[] nums, int k) {
	    k %= nums.length;
	    reverse(nums, 0, nums.length - 1);
	    reverse(nums, 0, k - 1);
	    reverse(nums, k, nums.length - 1);
	}

	public void reverse(int[] nums, int start, int end) {
	    while (start < end) {
	        int temp = nums[start];
	        nums[start] = nums[end];
	        nums[end] = temp;
	        start++;
	        end--;
	    }
	}

** Solution using Cyclic Replacements **
    public void rotate(int[] nums, int k) {
        k = k % nums.length;
        int count = 0;
        for (int start = 0; count < nums.length; start++) {
            int current = start;
            int prev = nums[start];
            do {
                int next = (current + k) % nums.length;
                int temp = nums[next];
                nums[next] = prev;
                prev = temp;
                current = next;
                count++;
            } while (start != current);
        }
    }








